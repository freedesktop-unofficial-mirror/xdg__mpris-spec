<?xml version="1.0" ?>
<node name="/Player_Node" xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <interface name="org.mpris.MediaPlayer2.Player">

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>
        This interface implements the methods for querying and providing basic
        control over what is currently playing.
      </p>
    </tp:docstring>

    <tp:enum name="Playback_State" type="i">
      <tp:enumvalue suffix="Playing" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A track is currently playing.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Paused" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A track is currently paused.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Stopped" value="2">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There is no track currently playing.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The playback state.</p>
      </tp:docstring>
    </tp:enum>

    <tp:simple-type name="Shuffle_State" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A shuffle state.</p>
        <p>
          A value of <strong>false</strong> indicates that playback is
          progressing linearly through a playlist, while <strong>true</strong>
          means playback is progressing through a playlist in some other order.
        </p>
      </tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="Repeat_State" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A "repeat current track" state.</p>
        <p>
          A value of <strong>false</strong> indicates that a different track
          (although this might be identical to the current track) will start
          playing when the current track finishes, while <strong>true</strong>
          means the current track will be repeated indefinitely.
        </p>
      </tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="Endless_State" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An endless playback state.</p>
        <p>
          A value of <strong>false</strong> indicates that playback will stop
          once the last element in a finite list has been played, while
          <strong>true</strong> means playback will continue forever.
        </p>
        <p>
          Note that this may be <strong>false</strong> when Repeat_State is
          <strong>true</strong>, even though Repeat_State is a form of endless
          playback.
        </p>
      </tp:docstring>
    </tp:simple-type>

    <tp:struct name="Status_Struct">
      <tp:docstring>
        <p>The status of the media player.</p>
      </tp:docstring>
      <tp:member type="i" tp:type="Playback_State" name="Playback_State">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The current playback state.</p>
        </tp:docstring>
      </tp:member>
      <tp:member type="d" tp:type="Rate" name="Playback_Rate">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The current playback rate.</p>
          <p>
             If the PLAYER_CAN_PLAY_BACKWARDS capability flag is not set, this
             can take only positive values.
          </p>
          <p>
            If the media player has no ability to play at speeds other than the
            normal playback rate, this must still be implemented, and must
            return 1.0.
          </p>
        </tp:docstring>
      </tp:member>
      <tp:member type="b" tp:type="Shuffle_State" name="Shuffle_State">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Whether the playback is linear.</p>
        </tp:docstring>
      </tp:member>
      <tp:member type="b" tp:type="Repeat_State" name="Repeat_State">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Whether the current track is repeated.</p>
        </tp:docstring>
      </tp:member>
      <tp:member type="b" tp:type="Endless_State" name="Endless_State">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Whether the playback stops once the last track finishes.</p>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:simple-type name="Rate" type="d">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Playback rate.</p>
        <p>
          This is a multiplier for the playback rate.  So a value of 0.5
          indicates that playback is happening at half speed, while 1.5 means
          that 1.5 seconds of "track time" is consumed every second.
        </p>
        <p>
          If PLAYER_CAN_PLAY_BACKWARDS flag is set, this may take on negative
          values, indicating that the position will decrease at the indicated
          rate.
        </p>
        <p>
          This should never be 0.0.  If playback is paused, the playback state
          enumeration should be used to indicate this.
        </p>
        <tp:rationale>
          <p>
            This allows clients to display (reasonably) accurate progress bars
            without having to regularly query the media player for the current
            position.
          </p>
        </tp:rationale>
      </tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="Track_Id" type="s" array-name="Track_Id_List">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Unique track identifier.</p>
        <p>
          If the media player implements the TrackList interface and allows
          the same track to appear multiple times in the tracklist,
          this must be unique within the scope of the tracklist.
        </p>
      </tp:docstring>
    </tp:simple-type>

    <tp:flags name="Player_Capability_Flags" value-prefix="PLAYER_CAN" type="i">
      <tp:flag suffix="GO_NEXT" value="1 (1 &lt;&lt; 0)">
        <tp:docstring>
          <p>
            The client can call the Next method on this interface and
            expect the current track to change.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="GO_PREVIOUS" value="2 (1 &lt;&lt; 1)">
        <tp:docstring>
          <p>
            The client can call the Previous method on this interface and
            expect the current track to change.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="PAUSE" value="4 (1 &lt;&lt; 2)">
        <tp:docstring>
          <p>
            The client can call the Pause and PlayPause methods on this
            interface and expect playback to pause.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="PLAY" value="8 (1 &lt;&lt; 3)">
        <tp:docstring>
          <p>
            Playback can be started.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SEEK" value="16 (1 &lt;&lt; 4)">
        <tp:docstring>
          <p>
            Seeking is possible in the currently played
            stream. Clients can enable seeking controls and
            expect both the SetPosition and the Seek methods to
            alter the current playback position.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="PROVIDE_METADATA" value="32 (1 &lt;&lt; 5)">
        <tp:docstring>
          <p>
            Metadata can be acquired for the currently played
            track.
          </p>
          <p>
            Note that the trackid and uri entries are provided
            even if this flag is not set.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="PROVIDE_POSITION" value="64 (1 &lt;&lt; 6)">
        <tp:docstring>
          <p>
            Playback position information can be retrieved through the Position
            property on this interface.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="REPEAT" value="128 (1 &lt;&lt; 7)">
        <tp:docstring>
          <p>
            The media player can be set to repeat the current track.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="LOOP" value="256 (1 &lt;&lt; 8)">
        <tp:docstring>
          <p>
            The media player can be set to loop through the tracklist.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="SHUFFLE" value="512 (1 &lt;&lt; 9)">
        <tp:docstring>
          <p>
            The media player can be set to play tracks randomly.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="CONTROL_RATE" value="1024 (1 &lt;&lt; 10)">
        <tp:docstring>
          <p>
            Clients can call the SetRate method on this interface and expect
            the playback rate to change accordingly.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="PLAY_BACKWARDS" value="2048 (1 &lt;&lt; 11)">
        <tp:docstring>
          <p>
            The Rate property can take negative values.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:docstring>
        <p>Player capability flags.</p>
      </tp:docstring>
    </tp:flags>

    <tp:simple-type name="Volume" type="d">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Audio volume level on a linear scale between 0.0 and 1.0, inclusive.</p>
        <ul>
          <li>0.0 means mute.</li>
          <li>1.0 is the maximum volume level.</li>
        </ul>
      </tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="Volume_Difference" type="d">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A relative change in volume.</p>
        <p>
          Represents a volume level increment or decrement on the same scale
          as "Volume".
        </p>
        <p>
          A positive value corresponds to an increment, while a negative
          value corresponds to a decrement.
        </p>
      </tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="Time_In_Ms" type="i">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Time in milliseconds.</p>
      </tp:docstring>
    </tp:simple-type>

    <method name="Next" tp:name-for-bindings="Next">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Skips to the next track in the tracklist.</p>
        <p>
          If there is no next track (and endless playback and track
          repeat are both off), stop playback.
        </p>
        <p>If playback is paused or stopped, it remains that way.</p>
      </tp:docstring>
    </method>

    <method name="Previous" tp:name-for-bindings="Previous">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Skips to the previous track in the tracklist.</p>
        <p>
          If there is no previous track (and endless playback and track
          repeat are both off), stop playback.
        </p>
        <p>If playback is paused or stopped, it remains that way.</p>
      </tp:docstring>
    </method>

    <method name="Pause" tp:name-for-bindings="Pause">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Pauses playback.</p>
        <p>If playback is already paused, this has no effect.</p>
        <p>
          Calling Play after this should cause playback to start again
          from the same position.
        </p>
      </tp:docstring>
    </method>

    <method name="PlayPause" tp:name-for-bindings="PlayPause">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Pauses playback.</p>
        <p>If playback is already paused, resumes playback.</p>
        <p>If playback is stopped, starts playback.</p>
      </tp:docstring>
    </method>

    <method name="Stop" tp:name-for-bindings="Stop">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Stops playback.</p>
        <p>If playback is already stopped, this has no effect.</p>
        <p>
          Calling Play after this should cause playback to
          start again from the beginning of the track.
        </p>
      </tp:docstring>
    </method>

    <method name="Play" tp:name-for-bindings="Play">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Starts or resumes playback.</p>
        <p>If already playing, this has no effect.</p>
        <p>If there is no track to play, this has no effect.</p>
      </tp:docstring>
    </method>

    <method name="SetRepeat" tp:name-for-bindings="Set_Repeat">
      <arg direction="in" type="b" name="State">
        <tp:docstring>
          <p>TRUE to repeat the current track, FALSE to stop repeating.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Toggles the current track repeat.</p>
      </tp:docstring>
    </method>

    <method name="SetLoop" tp:name-for-bindings="Set_Loop">
      <arg direction="in" type="b" tp:type="Endless_State" name="State">
        <tp:docstring>
          <p>
            TRUE to loop through the tracklist, FALSE to stop playback once the
            last item of the tracklist has been played.
          </p>
          <p>
            Note that just because the media player is in "endless playback"
            state, that does not mean it is repeating.  The media player may
            have other mechanisms for generating endless playback.  This
            method only controls looping, however.
          </p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Toggles the tracklist loop.</p>
      </tp:docstring>
    </method>

    <method name="SetShuffle" tp:name-for-bindings="Set_Shuffle">
      <arg direction="in" type="b" tp:type="Shuffle_State" name="State">
        <tp:docstring>
          <p>The shuffle state to set.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Toggles the tracklist shuffle.</p>
      </tp:docstring>
    </method>

    <method name="Seek" tp:name-for-bindings="Seek">
      <arg direction="in" type="i" name="Position" tp:type="Time_In_Ms">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The number of milliseconds to seek forward.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>
          Seeks forward in the current track by the specified number
          of milliseconds.
        </p>
        <p>
          A negative value seeks back. If this would mean seeking
          back further than the start of the track, the position
          is set to 0.
        </p>
        <p>
          If the value passed in would mean seeking beyond the end
          of the track, acts like a call to Next.
        </p>
        <p>
          If the PLAYER_CAN_SEEK capability flag is not set, this has no
          effect.
        </p>
      </tp:docstring>
    </method>

    <method name="SetRate" tp:name-for-bindings="Set_Rate">
      <arg direction="in" name="Rate" type="d" tp:type="Rate" >
        <tp:docstring>
          <p>The playack rate to set.</p>
          <p>
             If the PLAYER_CAN_PLAY_BACKWARDS capability flag is not set, this
             must be positive.
          </p>
          <p>
            A value of 0.0 should not be passed by the client.  If it is passed,
            the media player should act as though Pause was called.
          </p>
          <p>
            Not all values may be accepted by the media player.  It is left to
            media player implementations to decide how to deal with values they
            cannot use; they may either ignore them or pick a "best fit" value.
            Clients are recommended to only use sensible fractions or multiples
            of 1 (eg: 0.5, 0.25, 1.5, 2.0, etc).
          </p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Sets the current playing rate.</p>
        <p>
           If the PLAYER_CAN_CONTROL_RATE capability flag is not set, this
           method has no effect.
        </p>
      </tp:docstring>
    </method>

    <method name="AdjustVolume" tp:name-for-bindings="Adjust_Volume">
        <arg direction="in" type="d" name="Difference" tp:type="Volume_Difference">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
              <p>
                Fraction of the maximum volume level by which the volume
                should be increased or decreased.
              </p>
          </tp:docstring>
        </arg>
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Adds the specified value to to the current volume level.</p>
        <p>
          If adding the argument to the current volume would
          cause it to go above 1.0, it should be set to the maximum.
          Similarly, if it would cause it to drop below 0,
          it should be set to 0.0.
        </p>
        </tp:docstring>
    </method>

    <method name="SetPosition" tp:name-for-bindings="Set_Position">
      <arg direction="in" type="s" tp:type="Track_Id" name="TrackId">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The currently playing track's identifier.</p>
          <p>
            If this does not match the id of the currently-playing track,
            the call is ignored as "stale".
          </p>
        </tp:docstring>
      </arg>
      <arg direction="in" type="i" tp:type="Time_In_Ms" name="Position">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Track position in milliseconds.</p>
          <p>This must be between 0 and &lt;track_length&gt;.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Sets the current track position in milliseconds.</p>
        <p>If the Position argument is less than 0, do nothing.</p>
        <p>
          If the Position argument is greater than the track length,
          do nothing.
        </p>
        <p>
          If the PLAYER_CAN_SEEK capability flag is not set, this has no
          effect.
        </p>
      </tp:docstring>
    </method>

    <property name="Status" type="(idbbb)" tp:type="Status_Struct" access="read" tp:name-for-bindings="Status">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The current status of the media player.</p>
      </tp:docstring>
    </property>

    <property name="Metadata" tp:name-for-bindings="Metadata" type="a{sv}" tp:type="Metadata_Map" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The metadata of the current element.</p>
        <p>
          If there is a current track, this must have a "trackid" entry
          at the very least, which contains a string that uniquely identifies
          this track.
        </p>
        <p>
          If the media player implements the TrackList interface and allows
          the same track to appear multiple times in the tracklist, the
          "trackid" entry must be unique within the scope of the tracklist.
        </p>
        <p>
          Guidelines for other field names are at
          <a href="http://wiki.xmms2.xmms.se/wiki/MPRIS_Metadata">
            http://wiki.xmms2.xmms.se/wiki/MPRIS_Metadata
          </a>.
        </p>
      </tp:docstring>
    </property>

    <property name="Capabilities" type="i" tp:type="Player_Capability_Flags" tp:name-for-bindings="Capabilities" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A bitmask of capabilities.</p>
      </tp:docstring>
    </property>

    <property name="Volume" type="d" tp:type="Volume" tp:name-for-bindings="Volume" access="readwrite">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The volume level.</p>
        <p>
          When setting, if a negative value is passed, the volume
          should be set to 0.0.  If a value greater than 1 is
          passed, the volume should be set to the maximum level.
        </p>
      </tp:docstring>
    </property>

    <property name="Position" type="i" tp:type="Time_In_Ms" tp:name-for-bindings="Position" access="read">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>
            The current track position in milliseconds, between 0 and
            the 'length' metadata entry (see Metadata).
          </p>
          <p>
            Note: If the media player allows it, the current playback position
            can be changed either the SetPosition method or the Seek method on
            this interface.  If this is not the case, the PLAYER_CAN_SEEK
            capability flag will not be set.
          </p>
        </tp:docstring>
    </property>

    <signal name="MetadataChanged" tp:name-for-bindings="Metadata_Changed">
      <arg name="Metadata" type="a{sv}" tp:type="Metadata_Map">
        <tp:docstring>
          <p>The new metadata.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Indicates the the track metadata has changed.</p>
        <p>
          This may be due to a track change (in this case, the "trackid"
          entry contains a new value), due to a stream carrying new metadata,
          due to metadata being edited or due to metadata being fetched
          asynchronously.
        </p>
      </tp:docstring>
    </signal>

    <signal name="StatusChanged" tp:name-for-bindings="Status_Changed">
      <arg name="Status" type="(idbbb)" tp:type="Status_Struct">
        <tp:docstring>
          <p>The new status of the media player.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Indicates a change in the status of the media player.</p>
      </tp:docstring>
    </signal>

    <signal name="CapabilitiesChanged" tp:name-for-bindings="Capabilities_Changed">
      <arg name="Capabilities" type="i" tp:type="Player_Capability_Flags">
        <tp:docstring>
          <p>The new capabilities.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Indicates a change in the player capabilities.</p>
      </tp:docstring>
    </signal>

    <signal name="VolumeChanged" tp:name-for-bindings="Volume_Changed">
      <arg name="Volume" type="d" tp:type="Volume">
        <tp:docstring>
          <p>The new volume level.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Indicates a change in volume.</p>
      </tp:docstring>
    </signal>

    <signal name="Seeked" tp:name-for-bindings="Seeked">
      <arg name="Position" type="i" tp:type="Time_In_Ms">
        <tp:docstring>
          <p>The new position, in milliseconds.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>
          Indicates that the track position has changed in a way that is
          inconsistant with the current playing state.
        </p>
        <p>When this signal is not received, clients should assume that :</p>
        <ul>
          <li>
            When playing, the position progresses according to the rate property.
          </li>
          <li>When paused, it remains constant.</li>
        </ul>
        <p>
          This signal does not need to be emitted when playback starts
          or when the track changes, unless the track is starting at an
          unexpected position. An expected position would be the last
          known one when going from Paused to Playing, and 0 when going from
          Stopped to Playing.
        </p>
      </tp:docstring>
    </signal>

  </interface>
</node>
<!-- vim:set sw=2 sts=2 et ft=xml: -->
